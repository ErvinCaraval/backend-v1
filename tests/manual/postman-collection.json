{
  "info": {
    "name": "BrainBlitz Backend - Manual Tests",
    "description": "Colección de pruebas manuales para todas las HUs del backend",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "HU19 - Registro de Usuario",
      "item": [
        {
          "name": "Registro exitoso",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"password123\",\n  \"displayName\": \"Test User {{$randomInt}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has uid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uid');",
                  "    pm.collectionVariables.set('testUserId', jsonData.uid);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Registro con email duplicado",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"duplicate@example.com\",\n  \"password\": \"password123\",\n  \"displayName\": \"Duplicate User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "HU33 - Generación de Preguntas IA",
      "item": [
        {
          "name": "Generar preguntas exitosamente",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Ciencia\",\n  \"difficulty\": \"medium\",\n  \"count\": 3,\n  \"useAI\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/generate-questions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "generate-questions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has questions array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('questions');",
                  "    pm.expect(jsonData.questions).to.be.an('array');",
                  "    pm.expect(jsonData.questions.length).to.equal(3);",
                  "});",
                  "",
                  "pm.test('Questions have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.questions.forEach(question => {",
                  "        pm.expect(question).to.have.property('text');",
                  "        pm.expect(question).to.have.property('options');",
                  "        pm.expect(question).to.have.property('correctAnswerIndex');",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Fallar sin useAI",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"topic\": \"Historia\",\n  \"difficulty\": \"easy\",\n  \"count\": 5,\n  \"useAI\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/generate-questions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "generate-questions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message about AI mode', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('modo IA');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "HU28 - Listado de Preguntas",
      "item": [
        {
          "name": "Obtener todas las preguntas",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/questions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "questions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Questions have correct format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const question = jsonData[0];",
                  "        pm.expect(question).to.have.property('text');",
                  "        pm.expect(question).to.have.property('options');",
                  "        pm.expect(question).to.have.property('correctAnswerIndex');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "HU22 - Listado de Partidas Públicas",
      "item": [
        {
          "name": "Obtener partidas públicas",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/games",
              "host": ["{{baseUrl}}"],
              "path": ["api", "games"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Games have correct format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.forEach(game => {",
                  "        pm.expect(game).to.have.property('isPublic');",
                  "        pm.expect(game).to.have.property('status');",
                  "        pm.expect(game.isPublic).to.be.true;",
                  "        pm.expect(game.status).to.equal('waiting');",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "HU34 - Temas IA",
      "item": [
        {
          "name": "Obtener temas disponibles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/ai/topics",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "topics"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has topics array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('topics');",
                  "    pm.expect(jsonData.topics).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Topics include expected values', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.topics).to.include('Ciencia');",
                  "    pm.expect(jsonData.topics).to.include('Historia');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "HU35 - Niveles de Dificultad IA",
      "item": [
        {
          "name": "Obtener niveles de dificultad",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/ai/difficulty-levels",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "difficulty-levels"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has levels array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('levels');",
                  "    pm.expect(jsonData.levels).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Levels have correct format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.levels.forEach(level => {",
                  "        pm.expect(level).to.have.property('value');",
                  "        pm.expect(level).to.have.property('label');",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}