#!/bin/bash

# Script para configurar GitHub Actions en el repositorio BrainBlitz Backend
# Este script ayuda a resolver el error de dependency-review-action

echo "üöÄ Configurando GitHub Actions para BrainBlitz Backend"
echo "=================================================="

# Verificar si estamos en un repositorio git
if [ ! -d ".git" ]; then
    echo "‚ùå Error: No se encontr√≥ un repositorio git en el directorio actual"
    echo "   Aseg√∫rate de estar en la ra√≠z del proyecto"
    exit 1
fi

echo "‚úÖ Repositorio git detectado"

# Verificar si ya existen los workflows
if [ -d ".github/workflows" ]; then
    echo "üìÅ Directorio .github/workflows ya existe"
    echo "   Archivos encontrados:"
    ls -la .github/workflows/
else
    echo "üìÅ Creando directorio .github/workflows"
    mkdir -p .github/workflows
fi

# Verificar archivos de workflow
echo ""
echo "üîç Verificando archivos de workflow..."

if [ -f ".github/workflows/ci.yml" ]; then
    echo "‚úÖ ci.yml encontrado"
else
    echo "‚ùå ci.yml no encontrado - se crear√° autom√°ticamente"
fi

if [ -f ".github/workflows/dependency-check.yml" ]; then
    echo "‚úÖ dependency-check.yml encontrado"
else
    echo "‚ùå dependency-check.yml no encontrado - se crear√° autom√°ticamente"
fi

# Verificar package.json
echo ""
echo "üì¶ Verificando package.json..."

if [ -f "package.json" ]; then
    echo "‚úÖ package.json encontrado"
    
    # Verificar scripts de test
    if grep -q '"test"' package.json; then
        echo "‚úÖ Script de test encontrado"
    else
        echo "‚ö†Ô∏è  No se encontr√≥ script de test en package.json"
        echo "   Considera agregar: \"test\": \"jest\""
    fi
    
    # Verificar script de lint
    if grep -q '"lint"' package.json; then
        echo "‚úÖ Script de lint encontrado"
    else
        echo "‚ö†Ô∏è  No se encontr√≥ script de lint en package.json"
        echo "   Considera agregar: \"lint\": \"eslint .\""
    fi
else
    echo "‚ùå package.json no encontrado"
    exit 1
fi

echo ""
echo "üîß Configuraci√≥n recomendada para el repositorio:"
echo "=================================================="

# Detectar si es repositorio p√∫blico o privado
REPO_URL=$(git remote get-url origin 2>/dev/null || echo "")
if [[ $REPO_URL == *"github.com"* ]]; then
    REPO_NAME=$(echo $REPO_URL | sed 's/.*github.com[:/]\([^/]*\/[^/]*\)\.git.*/\1/')
    echo "üìã Repositorio detectado: $REPO_NAME"
    
    echo ""
    echo "üåê Para repositorios P√öBLICOS:"
    echo "   Los workflows funcionar√°n autom√°ticamente"
    echo "   No se requiere configuraci√≥n adicional"
    
    echo ""
    echo "üîí Para repositorios PRIVADOS:"
    echo "   Opci√≥n 1: Habilitar GitHub Advanced Security"
    echo "   - Ve a: https://github.com/$REPO_NAME/settings/security_analysis"
    echo "   - Habilita 'Dependency graph'"
    echo "   - Habilita 'GitHub Advanced Security' (requiere plan de pago)"
    echo ""
    echo "   Opci√≥n 2: Usar workflows alternativos (recomendado)"
    echo "   - Los workflows actuales funcionan sin GitHub Advanced Security"
    echo "   - Usan npm audit en lugar de dependency-review-action"
else
    echo "‚ö†Ô∏è  No se pudo detectar la URL del repositorio"
fi

echo ""
echo "üìù Pasos siguientes:"
echo "==================="
echo "1. Commit y push de los archivos de workflow:"
echo "   git add .github/"
echo "   git commit -m 'Add GitHub Actions workflows'"
echo "   git push"
echo ""
echo "2. Verificar que los workflows funcionen:"
echo "   - Ve a la pesta√±a 'Actions' en tu repositorio"
echo "   - Los workflows se ejecutar√°n autom√°ticamente en PRs"
echo ""
echo "3. Configurar variables de entorno (opcional):"
echo "   - Ve a Settings > Secrets and variables > Actions"
echo "   - Agrega NODE_ENV=production si es necesario"

echo ""
echo "‚úÖ Configuraci√≥n completada!"
echo "   Los workflows est√°n listos para usar sin GitHub Advanced Security"